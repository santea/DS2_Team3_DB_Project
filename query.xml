<query date="20180207">
    <SELECT_CONCERT_HALL>
        select ID, NAME, LOCATION, CAPACITY, (select count(*)
                                              from CONCERT
                                              where CONCERT.CONCERT_HALL_ID = HALL.ID) as ASSIGNED
        from CONCERT_HALL as HALL
    </SELECT_CONCERT_HALL>
    <SELECT_CONCERT>
        select distinct C.ID, C.NAME, C.TYPE, C.PRICE, (select count(*) from RESERVATION where CONCERT_ID = C.ID and RESERVATION_YN = 'Y') as BOOKED
        from CONCERT AS C
        group by C.ID, C.NAME, C.TYPE, C.PRICE
        order by ID
    </SELECT_CONCERT>
    <SELECT_AUDIENCE>
        select ID, NAME, GENDER, AGE
        from AUDIENCE
        order by ID
    </SELECT_AUDIENCE>
    <SELECT_AUDIENCE_BY_ID>
        select ID, NAME, GENDER, AGE
        from AUDIENCE
        where ID = %s
    </SELECT_AUDIENCE_BY_ID>
    <INSERT_CONCERT_HALL>
        insert into CONCERT_HALL (NAME, LOCATION, CAPACITY)
        values ('%s', '%s', %s)
    </INSERT_CONCERT_HALL>
    <DELETE_CONCERT_HALL>
        delete from CONCERT_HALL
        where ID = '%s'
    </DELETE_CONCERT_HALL>
    <INSERT_CONCERT>
        insert into CONCERT (NAME, TYPE, PRICE)
        values ('%s', '%s', %s)
    </INSERT_CONCERT>
    <DELETE_CONCERT>
        delete from CONCERT
        where ID = '%s'
    </DELETE_CONCERT>
    <INSERT_AUDIENCE>
        insert into AUDIENCE (NAME, GENDER, AGE)
        values ('%s', '%s', %s)
    </INSERT_AUDIENCE>
    <DELETE_AUDIENCE>
        delete from AUDIENCE
        where ID = '%s'
    </DELETE_AUDIENCE>
    <UPDATE_CONCERT>
        select 1
    </UPDATE_CONCERT>
    <UPDATE_CONCERT_CONCERT_HALL_ID>
        update CONCERT
        set CONCERT_HALL_ID = '%s'
        where ID = '%s'
    </UPDATE_CONCERT_CONCERT_HALL_ID>
    <SELECT_PERFORMANCE>
        select * from CONCERT_HALL
        where ID='%s' and 1 = %s
    </SELECT_PERFORMANCE>
    <SELECT_RESERVATION_BY_SEATNUMS>
        select CONCERT_ID, SEAT_NO, AUDIENCE_ID, RESERVATION_YN
        from RESERVATION
        where CONCERT_ID = %s and SEAT_NO IN (%s) and RESERVATION_YN = '%s'
    </SELECT_RESERVATION_BY_SEATNUMS>
    <SELECT_RESERVATION_BY_CONCERT_ID>
        select SEAT_NO, AUDIENCE_ID
        from RESERVATION
        where CONCERT_ID = %s
    </SELECT_RESERVATION_BY_CONCERT_ID>
    <INSERT_RESERVATION>
        CALL INSERT_SEAT(%s, %s, %s)
    </INSERT_RESERVATION>
    <UPDATE_RESERVATION>
        update RESERVATION
        set RESERVATION_YN = 'Y', AUDIENCE_ID = %s
        where CONCERT_ID = %s and SEAT_NO = %s
    </UPDATE_RESERVATION>
    <SELECT_CONCERT_BY_ID>
        select ID, CONCERT_HALL_ID, NAME, TYPE, PRICE
        from CONCERT
        where ID = %s
    </SELECT_CONCERT_BY_ID>
    <SELECT_CONCERT_BY_HALL_ID>
        select ID, NAME, TYPE, PRICE, (select count(*)
                                       from RESERVATION
                                       where  RESERVATION_YN = 'N' and CONCERT_ID = C.ID) as REMAIN_SEAT
        from CONCERT as C
        where CONCERT_HALL_ID = %s
    </SELECT_CONCERT_BY_HALL_ID>
    <SELECT_CONCERT_HALL_BY_CONCERT_ID>
        select ID, NAME, LOCATION, CAPACITY
        from CONCERT_HALL
        where ID = (select CONCERT_HALL_ID
                    from CONCERT
                    where CONCERT.ID = %s)
    </SELECT_CONCERT_HALL_BY_CONCERT_ID>
    <SELECT_CONCERT_HALL_BY_ID>
        select ID, NAME, LOCATION, CAPACITY
        from CONCERT_HALL
        where ID = %s
    </SELECT_CONCERT_HALL_BY_ID>
    <SELECT_AUDIENCE_BY_CONCERT_ID>
        select distinct A.ID, A.NAME, A.GENDER, A.AGE
        from RESERVATION as R, AUDIENCE as A
        where R.CONCERT_ID = %s and R.AUDIENCE_ID = A.ID
    </SELECT_AUDIENCE_BY_CONCERT_ID>
    <SHOW_TABLES>
        show tables;
    </SHOW_TABLES>
    <DROP_TABLES>
        drop table IF EXISTS RESERVATION, CONCERT, AUDIENCE, CONCERT_HALL;
    </DROP_TABLES>
    <CREATE_TABLES>
        create table IF NOT EXISTS CONCERT_HALL (
        ID INT UNSIGNED AUTO_INCREMENT,
        NAME VARCHAR(200) NOT NULL,
        LOCATION VARCHAR(200) NOT NULL,
        CAPACITY int UNSIGNED CHECK (PERSONNEL > 0),
        CONSTRAINT CONCERT_HALL_PK PRIMARY KEY (ID)
        );

        create table IF NOT EXISTS CONCERT (
        ID INT UNSIGNED AUTO_INCREMENT,
        CONCERT_HALL_ID INT UNSIGNED,
        NAME VARCHAR(200) NOT NULL,
        TYPE VARCHAR(200) NOT NULL,
        PRICE INT UNSIGNED CHECK (PRICE >= 0),
        PRIMARY KEY(ID),
        CONSTRAINT CONCERT_CONCERT_HALL_FK FOREIGN KEY (CONCERT_HALL_ID)
            REFERENCES CONCERT_HALL(ID)
            ON DELETE CASCADE
            ON UPDATE CASCADE
        );

        create table IF NOT EXISTS AUDIENCE (
        ID INT UNSIGNED AUTO_INCREMENT,
        NAME VARCHAR(200) NOT NULL,
        GENDER VARCHAR(1) NOT NULL,
        AGE INT UNSIGNED CHECK (AGE > 0),
        PRIMARY KEY(ID)
        );

        create table IF NOT EXISTS RESERVATION (
        CONCERT_ID int UNSIGNED,
        SEAT_NO int UNSIGNED CHECK (SEAT_NO > 0),
        AUDIENCE_ID int UNSIGNED,
        RESERVATION_YN varchar(1) DEFAULT 'N',
        PRIMARY KEY(CONCERT_ID, SEAT_NO),
        CONSTRAINT RESERVATION_CONCERT_FK FOREIGN KEY (CONCERT_ID)
            REFERENCES CONCERT(ID)
            ON DELETE CASCADE
            ON UPDATE CASCADE,
        CONSTRAINT RESERVATION_AUDIENCE_FK FOREIGN KEY (AUDIENCE_ID)
            REFERENCES AUDIENCE(ID)
            ON DELETE CASCADE
            ON UPDATE CASCADE
        );
    </CREATE_TABLES>
</query>